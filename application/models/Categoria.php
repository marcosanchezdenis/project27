<?php

/**
 * Model_Categoria
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Model_Categoria extends Model_Base_Categoria
{
    public function getSubCategorias()
    {
        $subCategorias = array_map(function ($categoria) {
            return $categoria->getEstructura();
        }, $this->Categoria->getData());
        $this->aasort($subCategorias, 'orden');
        return $subCategorias;
    }
    
    public function getPuntajesDeSubCategorias($respuestas, $departamento, $dpto)
    {
        $subCategorias = array_map(function ($categoria) use ($respuestas, $departamento, $dpto) {
            return $categoria->getPuntajes($respuestas, $departamento, $dpto);
        }, $this->Categoria->getData());
        $this->aasort($subCategorias, 'orden');
        return $subCategorias;
    }
    
    public function getPreguntas()
    {
        $preguntas = array_map(function ($pregunta) {
            return $pregunta->getEstructura();
        }, $this->Pregunta->getData());
        $this->aasort($preguntas, 'orden');
        return $preguntas;
    }
    
    public function getPuntajesDePreguntas($respuestas, $departamento, $dpto)
    {
        $preguntas = array_map(function ($pregunta) use ($respuestas, $departamento, $dpto) {
            if ($pregunta->tipo === "E") {
                return $pregunta->getPuntajes($respuestas, $departamento, $dpto);
            }
            return false;
        }, $this->Pregunta->getData());
        
        $preguntas = array_filter($preguntas, function ($pregunta) {
            return is_array($pregunta);
        });
        
        $this->aasort($preguntas, 'orden');
        return $preguntas;
    }
    
    protected function aasort(&$array, $key)
    {
        $sorter = array();
        $ret = array();
        reset($array);
    
        foreach ($array as $ii => $va) {
            $sorter[$ii] = $va[$key];
        }
        asort($sorter);
    
        foreach ($sorter as $ii => $va) {
            $ret[$ii] = $array[$ii];
        }
    
        $array = $ret;
    }
    
    public function getEstructura()
    {
        return array(
            "categoria_id" => $this->categoria_id,
            "categoria"    => $this->nombre,
            "descripcion"  => $this->descripcion,
            "orden"        => $this->orden,
            "Categorias"   => $this->getSubCategorias(),
            "Preguntas"    => $this->getPreguntas(),
        );
    }
    
    public function getPuntajes($respuestas, $departamento, $dpto)
    {
        $puntajes = array(
            "categoria_id" => $this->categoria_id,
            "categoria"    => $this->nombre,
            "descripcion"  => $this->descripcion,
            "orden"        => $this->orden,
            "Categorias"   => $this->getPuntajesDeSubCategorias($respuestas, $departamento, $dpto),
            "Preguntas"    => $this->getPuntajesDePreguntas($respuestas, $departamento, $dpto),
        );
        
        $totalPreguntas = 0.0;
        $cntPreguntas   = 0.0;
		$asterisk = "";
        foreach ($puntajes["Preguntas"] as $pregunta) {
            $cntPreguntas += 1.0;
            $totalPreguntas += $pregunta["promedio"];
			if($pregunta["asterisk"] != ""){
				$asterisk = "*";
			}
        }
        
        $totalCategorias = 0.0;
        $cntCategorias   = 0.0;
        foreach ($puntajes["Categorias"] as $categoria) {
            $cntCategorias += 1.0;
            $totalCategorias += $categoria["promedio"];
        }
        
        $promedioCategorias = 0.0;
        if ($cntCategorias) {
            $promedioCategorias = $totalCategorias / $cntCategorias;
        }
        
        $promedioPreguntas = 0.0;
        if ($cntPreguntas) {
            $promedioPreguntas = $totalPreguntas / $cntPreguntas;
        }
        
        $puntajes["promedio"] = round($promedioCategorias + $promedioPreguntas, 2);
        $puntajes["nota"] = $this->getNota($puntajes["promedio"]) . $asterisk;
        return $puntajes;
    }
    
    public function getNota($promedio)
    {
        if ($promedio <= 2.0) {
            return "Deficitario";
        } elseif ($promedio <= 2.6) {
            return "Insuficiente";
        } elseif ($promedio <= 3.2) {
            return "Aceptable";
        } elseif ($promedio <= 3.7) {
            return "Bueno";
        } else {
            return "Excelente";
        }
    }
    
    public function addOrden($padre)
    {
    	// ARREGLAR!!!
    	if ($this->orden == null || $this->orden == "") {
	    	if ($padre != "encuesta") {
	    	    $categoriaPadre = $this->CategoriaPadre;
	    	    $this->orden = $categoriaPadre->getNextCategoria();
	    	} else {
	    	    $encuestaPadre = $this->Encuesta;
	    		$this->orden = $encuestaPadre->getNextCategoria();
	    	}
    	}
    }
    
    public function getNextCategoria()
    {
        $maxOrden = array_reduce(
            $this->Categoria->getData(),
            function ($max, $categoria) {
                if ($categoria->orden > $max) {
                    return $categoria->orden;
                }
                return $max;
            },
            0
        );
        return $maxOrden + 1;
    }
    
    public function getNextPregunta()
    {
        $maxOrden = array_reduce(
            $this->Pregunta->getData(),
            function ($max, $categoria) {
                if ($categoria->orden > $max) {
                    return $categoria->orden;
                }
                return $max;
            },
            0
        );
        return $maxOrden + 1;
    }
    
    public function borrar()
    {
    	foreach ($this->Categoria as $subCategoria) {
    		$subCategoria->borrar();
    	}
    	foreach ($this->Pregunta as $pregunta) {
    		$pregunta->borrar();
    	}
    	
    	$this->delete();
    }
}