<?php

/**
 * Model_Encuesta
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Model_Encuesta extends Model_Base_Encuesta
{
    public function getCategorias()
    {
        $categorias = array_map(function ($categoria) {
            return $categoria->getEstructura();
        }, $this->Categoria->getData());
        $this->aasort($categorias, 'orden');
        return $categorias;
    }
    
    public function getPuntajesDeCategorias($respuestas, $departamento, $dpto)
    {
        $categorias = array_map(function ($categoria) use ($respuestas, $departamento, $dpto) {
            return $categoria->getPuntajes($respuestas, $departamento, $dpto);
        }, $this->Categoria->getData());
        $this->aasort($categorias, 'orden');
        return $categorias;
    }
    
    public function getPreguntas()
    {
        $preguntas = array_map(function ($pregunta) {
            return $pregunta->getEstructura();
        }, $this->Pregunta->getData());
        $this->aasort($preguntas, 'orden');
        return $preguntas;
    }
    
    public function getPuntajesDePreguntas($respuestas, $departamento, $dpto)
    {
        $preguntas = array_map(function ($pregunta) use ($respuestas, $departamento, $dpto) {
            if ($pregunta->tipo === "E") {
                return $pregunta->getPuntajes($respuestas, $departamento, $dpto);
            }
            return false;
        }, $this->Pregunta->getData());
        $this->aasort($preguntas, 'orden');
        return $preguntas;
    }
    
    protected function aasort(&$array, $key)
    {
        $sorter = array();
        $ret = array();
        reset($array);
        
        foreach ($array as $ii => $va) {
            $sorter[$ii] = $va[$key];
        }
        asort($sorter);
        
        foreach ($sorter as $ii => $va) {
            $ret[$ii] = $array[$ii];
        }
        
        $array = $ret;
    }
    
    public function getNextCategoria()
    {
        $maxOrden = array_reduce(
            $this->Categoria->getData(),
            function ($max, $categoria) {
                if ($categoria->orden > $max) {
                    return $categoria->orden;
                }
                return $max;
            },
            0
        );
        return $maxOrden + 1;
    }
    
    public function getNextPregunta()
    {
        $maxOrden = array_reduce(
            $this->Pregunta->getData(),
            function ($max, $categoria) {
                if ($categoria->orden > $max) {
                    return $categoria->orden;
                }
                return $max;
            },
            0
        );
        return $maxOrden + 1;
    }
    
    public function borrar()
    {
    	foreach ($this->Categoria as $categoria) {
    		$categoria->borrar();
    	}
    	
    	foreach ($this->Pregunta as $pregunta) {
    		$pregunta->borrar();
    	}
    	
    	$this->delete();
    }
    
    public function getEstructura()
    {
        return array(
            "encuesta_id" => $this->encuesta_id,
            "encuesta"    => $this->nombre,
            "descripcion" => $this->descripcion,
            "fecha"       => $this->fecha,
            "activo"	  => $this->activo,
            "escala_id"	  => $this->escala_id,
            "escala"	  => $this->Escala->nombre,
            "valores"	  => $this->Escala->getValores(),
            "Categorias"  => $this->getCategorias(),
            "Preguntas"   => $this->getPreguntas(),
        );
    }
    
    public function getPuntajes($respuestas, $departamento, $dpto)
    {
        return array(
            "encuesta_id" => $this->encuesta_id,
            "encuesta"    => $this->nombre,
            "Categorias"  => $this->getPuntajesDeCategorias($respuestas, $departamento, $dpto),
            "Preguntas"   => $this->getPuntajesDePreguntas($respuestas, $departamento, $dpto),
        );
    }
}